/**
 * @file
 * Handles the accessible navigation menu, including the mobile hamburger toggle
 * and submenu accordions.
 *
 * This script is designed to work with the markup generated by
 * templates/block/block--system-menu-block.html.twig and
 * templates/navigation/menu.html.twig.
 */
((Drupal) => {
  'use strict';

  /**
   * Initializes the main navigation menu behavior.
   *
   * @type {Drupal.behavior}
   */
  Drupal.behaviors.groundworkNavigation = {
    attach: function (context, settings) {
      // Process each horizontal menu found on the page.
      const navBlocks = context.querySelectorAll('.menu--horizontal');
      if (!navBlocks.length) {
        return;
      }

      navBlocks.forEach(navBlock => {
        // --- Main Menu Toggle (Hamburger) ---
        const mainMenuToggleButton = navBlock.querySelector('.gw-menu-toggle');
        if (!mainMenuToggleButton || mainMenuToggleButton.hasAttribute('data-js-initialized')) {
          return; // Already processed
        }

        // Attempt to resolve the controlled menu via aria-controls, but fall back
        // to the first levelâ€‘0 menu if the ID is missing or invalid.
        const controlledMenuId = mainMenuToggleButton.getAttribute('aria-controls');
        let mainMenu = null;
        if (controlledMenuId) {
          mainMenu = document.getElementById(controlledMenuId);
        }
        if (!mainMenu) {
          mainMenu = navBlock.querySelector('.menu--level-0');
        }

        // Always attach the click handler, toggling aria-expanded on the button
        // and the .is-open class on the menu, nav block and body.  The toggle
        // still works if no menu is found (e.g., when markup is misconfigured).
        mainMenuToggleButton.addEventListener('click', () => {
          const isExpanded = mainMenuToggleButton.getAttribute('aria-expanded') === 'true';
          mainMenuToggleButton.setAttribute('aria-expanded', !isExpanded);
          if (mainMenu) {
            mainMenu.classList.toggle('is-open');
          }
          navBlock.classList.toggle('is-open');
          document.body.classList.toggle('is-menu-open');
        });
        mainMenuToggleButton.setAttribute('data-js-initialized', 'true');

        // --- Submenu Toggles (Accordion on Mobile) ---
        const submenuToggleButtons = navBlock.querySelectorAll('.submenu-toggle');

        submenuToggleButtons.forEach(toggleButton => {
          if (toggleButton.hasAttribute('data-js-initialized')) {
            return;
          }

          toggleButton.addEventListener('click', (e) => {
            const button = e.currentTarget;
            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            const controlledSubmenuId = button.getAttribute('aria-controls');
            let controlledSubmenu = null;

            // Resolve the submenu via its ID, or fall back to the nearest
            // `.menu` within the same list item if the ID is missing.
            if (controlledSubmenuId) {
              controlledSubmenu = document.getElementById(controlledSubmenuId);
            }
            if (!controlledSubmenu) {
              const parentListItem = button.closest('li');
              if (parentListItem) {
                controlledSubmenu = parentListItem.querySelector('.menu');
              }
            }

            if (controlledSubmenu) {
              button.setAttribute('aria-expanded', !isExpanded);
              controlledSubmenu.classList.toggle('is-open');
            }
          });

          toggleButton.setAttribute('data-js-initialized', 'true');
        });
      });
    }
  };

})(Drupal);
