/* ==========================================================================
   Grid Layout â€“ Container and Layout Modifiers
   Defines the base `.grid` system used to align `.grid-cell` elements.
   Works with responsive BSCs in `css/components/grid-widths.css`.
   ========================================================================== */

:root {
  /**
   * @token
   * @name --grid-gutter
   * @description Default spacing between grid cells when using gutter.
   */
  --grid-gutter: 0.8rem;
}

/**
 * @layout
 * @name .grid
 * @description Flex wrapper that enables responsive multi-column layout.
 */
.grid {
  display: flex;
  flex-wrap: wrap;
}

/**
 * @layout
 * @name .grid--with-gutter
 * @description Adds outer negative margin and inner padding to simulate gutter.
 */
.grid--with-gutter {
  margin: calc(-1 * var(--grid-gutter));
}

/**
 * @layout
 * @description Applies gutter padding to immediate .grid-cell children.
 */
.grid--with-gutter > .grid-cell {
  padding: var(--grid-gutter);
}

/**
 * @layout
 * @name .grid--gap
 * @description Uses native `gap` instead of negative margin/padding.
 */
.grid--gap {
  gap: var(--grid-gutter);
}

/**
 * @layout
 * @name .grid--centered
 * @description Horizontally center-aligns all cells inside the grid.
 */
.grid--centered {
  justify-content: center;
}

/**
 * @layout
 * @name .grid--between
 * @description Distributes cells with space-between alignment.
 */
.grid--between {
  justify-content: space-between;
}

/**
 * @layout
 * @name .grid--middle
 * @description Vertically centers all items in the grid.
 */
.grid--middle {
  align-items: center;
}

/**
 * @layout
 * @name .grid--stretch
 * @description Stretches cells to fill vertical height equally.
 */
.grid--stretch {
  align-items: stretch;
}

/**
 * @layout
 * @name .grid--reverse
 * @description Reverses the order of cells (row-reverse).
 */
.grid--reverse {
  flex-direction: row-reverse;
}

/**
 * @layout
 * @name .grid--stacked
 * @description Stacks cells vertically like a column layout.
 */
.grid--stacked {
  flex-direction: column;
}

/**
 * @layout
 * @name .grid--equal
 * @description Makes all cells equal height via `align-self: stretch`.
 */
.grid--equal .grid-cell {
  align-self: stretch;
}
